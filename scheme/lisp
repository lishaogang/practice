(define apply-in-underlying-scheme apply)

(define (apply procedure arguments)
	(cond ((primitive-procedure? procedure)
		   (apply-primitive-procedure procedure arguments))
		  ((compound-procedure? procedure)
		   (eval-sequence
				(procedure-body procedure)
				(extend-enviroment
					(procedure-pramaters procedure)
					arguments
					(procedure-enviroment procedure))))
		  (else
			(error "Unkown procedure type --APPLY" procedure))))

(define (eval exp env)
	(cond ((self-evaluating? exp) exp)
		  ((variable? exp) (lookup-variable-value exp env))
		  ((quoted? exp) (text-of-quotation exp))
		  ((assignment? exp) (eval-assignment exp env))
		  ((defination? exp) (eval-defination exp env))
		  ((if? exp) (eval-if exp env))
		  ((lambda? exp)
		   (make-procedure (lambda-pramaters exp)
						   (lambda-body exp)
						   env))
		  ((begin? exp)
		   (eval-sequence (begin-action exp) env))
		  ((cond? exp) (eval (cond->if exp) env))
		  ((application? exp)
		   (apply (eval (operator exp) env)
				  (list-of-values (operands exp) env)))
		  (else
		   (error "Unkown expression type --EVAL" exp))))
		   
(define (list-of-values exps env)
	(if (no-operands? exps)
		'()
		(cons (eval (first-operand exps) env)
			  (list-of-values (rest-operands exps) env))))
			  
(define (eval-if exp env)
	(if true? (eval (if-predicate exp) env)
		(eval (if-consequent exp) env)
		(eval (if-alternative exp) env)))
		
(define (eval-sequence exps env)
	(cond ((last-exp? exps) (eval (firs-exp exps) env))
		  (else (eval (firs-exp exps) env)
				(eval-sequence (rest-exps exps) env))))
